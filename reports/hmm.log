Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/anaconda3/lib/python3.8/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/anaconda3/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/anaconda3/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/anaconda3/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/anaconda3/lib/python3.8/site-packages/nbclient/client.py", line 540, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/lib/python3.8/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/anaconda3/lib/python3.8/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
seq_len = 20
state_seq, obs_seq = hmm_sample(params, seq_len, PRNGKey(1))
print(state_seq)
print(obs_seq)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTracerArrayConversionError[0m                Traceback (most recent call last)
[0;32m<ipython-input-9-0d29578f3271>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0mseq_len[0m [0;34m=[0m [0;36m20[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0mstate_seq[0m[0;34m,[0m [0mobs_seq[0m [0;34m=[0m [0mhmm_sample[0m[0;34m([0m[0mparams[0m[0;34m,[0m [0mseq_len[0m[0;34m,[0m [0mPRNGKey[0m[0;34m([0m[0;36m1[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0mprint[0m[0;34m([0m[0mstate_seq[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0mprint[0m[0;34m([0m[0mobs_seq[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m<ipython-input-8-373c99e1e67e>[0m in [0;36mhmm_sample[0;34m(params, seq_len, rng_key)[0m
[1;32m     16[0m     [0mkeys[0m [0;34m=[0m [0mjax[0m[0;34m.[0m[0mrandom[0m[0;34m.[0m[0msplit[0m[0;34m([0m[0mrng_state[0m[0;34m,[0m [0mseq_len[0m [0;34m-[0m [0;36m1[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     17[0m [0;34m[0m[0m
[0;32m---> 18[0;31m     [0mfinal_state[0m[0;34m,[0m [0mstates[0m [0;34m=[0m [0mjax[0m[0;34m.[0m[0mlax[0m[0;34m.[0m[0mscan[0m[0;34m([0m[0mdraw_state[0m[0;34m,[0m [0minitial_state[0m[0;34m,[0m [0mkeys[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     19[0m     [0mstate_seq[0m [0;34m=[0m [0mjnp[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mjnp[0m[0;34m.[0m[0marray[0m[0;34m([0m[0;34m[[0m[0minitial_state[0m[0;34m][0m[0;34m)[0m[0;34m,[0m [0mstates[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     20[0m [0;34m[0m[0m

    [0;31m[... skipping hidden 13 frame][0m

[0;32m<ipython-input-8-373c99e1e67e>[0m in [0;36mdraw_state[0;34m(prev_state, key)[0m
[1;32m      9[0m [0;34m[0m[0m
[1;32m     10[0m     [0;32mdef[0m [0mdraw_state[0m[0;34m([0m[0mprev_state[0m[0;34m,[0m [0mkey[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 11[0;31m         [0mlogits[0m [0;34m=[0m [0mlogit[0m[0;34m([0m[0mtrans_mat[0m[0;34m[[0m[0;34m:[0m[0;34m,[0m [0mprev_state[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     12[0m         [0mstate[0m [0;34m=[0m [0mjax[0m[0;34m.[0m[0mrandom[0m[0;34m.[0m[0mcategorical[0m[0;34m([0m[0mkey[0m[0;34m,[0m [0mlogits[0m[0;34m=[0m[0mlogits[0m[0;34m.[0m[0mflatten[0m[0;34m([0m[0;34m)[0m[0;34m,[0m [0mshape[0m[0;34m=[0m[0;34m([0m[0;36m1[0m[0;34m,[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     13[0m         [0;32mreturn[0m [0mstate[0m[0;34m,[0m [0mstate[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.8/site-packages/jax/core.py[0m in [0;36m__array__[0;34m(self, *args, **kw)[0m
[1;32m    468[0m [0;34m[0m[0m
[1;32m    469[0m   [0;32mdef[0m [0m__array__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkw[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 470[0;31m     [0;32mraise[0m [0mTracerArrayConversionError[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    471[0m [0;34m[0m[0m
[1;32m    472[0m   [0;32mdef[0m [0m__index__[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mTracerArrayConversionError[0m: The numpy.ndarray conversion method __array__() was called on the JAX Tracer object Traced<ShapedArray(int32[1])>with<DynamicJaxprTrace(level=1/0)>
While tracing the function draw_state at <ipython-input-8-373c99e1e67e>:10 for scan, this concrete value was not available in Python because it depends on the value of the argument 'prev_state'.
See https://jax.readthedocs.io/en/latest/errors.html#jax.errors.TracerArrayConversionError
TracerArrayConversionError: The numpy.ndarray conversion method __array__() was called on the JAX Tracer object Traced<ShapedArray(int32[1])>with<DynamicJaxprTrace(level=1/0)>
While tracing the function draw_state at <ipython-input-8-373c99e1e67e>:10 for scan, this concrete value was not available in Python because it depends on the value of the argument 'prev_state'.
See https://jax.readthedocs.io/en/latest/errors.html#jax.errors.TracerArrayConversionError

